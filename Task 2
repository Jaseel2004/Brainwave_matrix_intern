import tkinter as tk 
from tkinter import font 
import re

def check_password_strength(password):
    # Criteria for the password strength
    length = len(password)
    if length < 8:
        return "Password is too short. It should be at least & characters long.", "red"

    # Check for complexity
    has_lower = re.search(r' [a-z]', password)is not None
    has_upper = re.search(r' [A-Z]', password)is not None
    has_digit = re.search(r' [0-9]', password) is not None
    has_special = re.search(r' [\W_]', password) is not None

    # Check for common passwords (you can expand this list as needed)
    common_passwords = ['password','123456', 'qwerty', 'abc123', 'letmein']
    if password.lower() in common_ passwords:
        return "This password is too common. Please choose a more unique one.", "red"

    # Evaluate complexity score
    complexity_score = sum([has_ lower, has_upper, has_digit, has_special])
   
    if complexity score ‹ 3:
    return "Password is too simple. It must include at least 3 of the following: lowercase, uppercase, digits, special characters.", "orange"

    # Length-based strength
    if length >= 12:
        length_strength = "Strong"
    elif length ›= 10:
        length_strength = "Moderate"
    else:
        length_strength = "Weak"

    # Complexity-based strength
    if complexity score == 4: 
        complexity_strength ="Strong"
    elif complexity_score == 3:
        complexity_strength = "Moderate"
    else:
        complexity strength = "Weak"

    # Overall password strength rating
    if length strength == "Strong" and complexity_strength == "Strong":
        overall_strength = "Strong"
        color = "green"
    elif (length_strength == "Moderate" and complexity_strength == "Moderate") or \
         (length strength == "Strong" and complexity strength == "Moderate") or \
         (length_strength == "Moderate" and complexity_strength == "Strong"):
        overall_strength = "Moderate"
        color = "orange"
    else:
        overall_strength = "Weak"
        color = "red"

    feedback = f"Password strength is {overall_strength}. You can improve it by: \n" + \
               f"1. Ensuring at least 12 characters for better strength.\n" + \
               f"2. Using a mix of upper/lowercase letters, numbers, and special characters. \n" + \ f"3. Avoid using common patterns or phrases."

    return feedback, color

def on_check_button_click():
    password = password_entry.get()
    result, color = check_password_strength(password)

    # Update the result label with feedback and color
    result_label.config (text=result, fg=color)
    result_label.pack(pady=10)

# Create the main window
root = tk.Tk()
root.title("Password Strength Checker")
root.geometry ("500x400") # Set window size

#Set the font for headings and labels
heading_font = font.Font(family="Helvetica",size=16, weight="bold")
text_font = font.Font(family="Helvetica", size=12)
    
# Create a heading_label
heading_label = tk.Label(root, text="Enter Password to Check Its Strength", font=heading_font)
heading_label.pack(pady=20)

# Create a password entry box
password_entry = tk.Entry(root, show="*", width=30, font=text_font)
password_entry-pack(pady=10)

# Create check_button
check_button = tk.Button(root, text="Check Password Strength", command=on_check_button_click, font=text_font)
check _button.pack(pady=20)

# Create a label to display the result
result_label = tk.Label(root, text="" font-text_font, wraplength=400, justify="left")

# Run the GUI event loop
root.mainloop()
